<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用DDNS脚本对阿里云提供的域名进行动态解析</title>
    <url>/%E4%BD%BF%E7%94%A8DDNS%E8%84%9A%E6%9C%AC%E5%AF%B9%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="使用DDNS脚本对阿里云提供的域名进行动态解析"><a href="#使用DDNS脚本对阿里云提供的域名进行动态解析" class="headerlink" title="使用DDNS脚本对阿里云提供的域名进行动态解析"></a>使用DDNS脚本对阿里云提供的域名进行动态解析</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前用bitwarden_rs的docker容器+Nginx反向代理，并设置了https，把bitwarden服务器部署到了自己的电脑上，在校园网中提供服务–只要我的手机连上学校的wifi，就可以访问到我电脑上的bitwarden服务、</p>
<p><a href="https://zhuanlan.zhihu.com/p/158794535" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/158794535</a></p>
<p>但是我遇到了一个麻烦的问题，就是电脑在校园网的ip偶尔会发生变化，每次变化就要手动登陆阿里云去修改DNS的解析ip地址，这很麻烦。所以我决定使用DDNS来完成解析ip的动态切换。</p>
<p>推荐Github上这个项目：<br><a href="https://github.com/NewFuture/DDNS" target="_blank" rel="noopener">https://github.com/NewFuture/DDNS</a><br>支持许多服务商的API，功能也比较完善。<br><img src="https://img-blog.csdnimg.cn/20201218132341742.png" alt="支持的DNS服务商"><br>以阿里云为例，进行介绍。大概的思路就是创建一个RAM子账户，然后授予这个账户通过API解析DNS的权限，最后把账户的ACCESS_ID和ACCESS_KEY复制到配置文件中。</p>
<p><a href="https://help.aliyun.com/document_detail/28637.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/28637.html</a><br>按照文档给出的方式，创建子账号，注意创建子账号的时候需要选择“编程访问”。<br><img src="https://img-blog.csdnimg.cn/20201215131413482.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201218213338242.png" alt="在这里插入图片描述"></p>
<p>之后给RAM子账号授权，选择两个管理DNS的权限：<br><img src="https://img-blog.csdnimg.cn/20201218212451329.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201218212933821.png" alt="在这里插入图片描述"><br>之后来到Github项目的release页，选择exe或者python都可以，配置的参数可以看官方文档，需要注意的是，id填的是你的ACCESS_ID，token填的是你的ACCESS_TOKEN（以阿里云为例）。</p>
<p>最后在bitwarden启动前，先调用脚本对DNS进行解析设定。这样每次启动bitwarden就不用一直手动修改域名解析设定了。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ProcessName</span> = <span class="string">"docker desktop"</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">get-process</span> <span class="variable">$ProcessName</span> <span class="literal">-ErrorAction</span> SilentlyContinue) <span class="operator">-eq</span> <span class="variable">$Null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    echo <span class="string">"Docker is not running,strating...."</span> </span><br><span class="line">    start <span class="string">"Docker Desktop"</span></span><br><span class="line">    sleep <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">    echo <span class="string">"Dcoker is running."</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">docker start bitwarden</span><br><span class="line"></span><br><span class="line">echo <span class="string">"resolve DNS address...."</span></span><br><span class="line">.\DNS.lnk</span><br><span class="line"></span><br><span class="line">echo <span class="string">"start Nginx..."</span></span><br><span class="line">.\nginx</span><br><span class="line"></span><br><span class="line">echo <span class="string">"ok"</span></span><br></pre></td></tr></table></figure>


<p>本文地址： <a href="https://www.chimaoshu.top/使用DDNS脚本对阿里云域名进行动态域名解析/">https://www.chimaoshu.top/使用DDNS脚本对阿里云域名进行动态域名解析/</a> </p>
]]></content>
      <tags>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>非常简单的sqlite入门教程</title>
    <url>/%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84sqlite%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="简单的sqlite入门教程"><a href="#简单的sqlite入门教程" class="headerlink" title="简单的sqlite入门教程"></a>简单的sqlite入门教程</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>进入sqlite的官网：<a href="https://www.sqlite.org/index.html" target="_blank" rel="noopener">https://www.sqlite.org/index.html</a><br>点击download：<br><img src="https://img-blog.csdnimg.cn/20201024182850910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70#pic_center" alt="sqlite下载"><br><img src="https://img-blog.csdnimg.cn/20201024183129124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载后解压。</p>
<p>注：如果想要在任意文件目录都可以使用sqlite，请把sqlite所在的文件夹，也就是你解压的文件夹，加入到环境变量path中。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>解压后在解压文件夹下打开cmd（或者打开cmd切换到解压文件夹），输入命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlite3 students.db</span><br></pre></td></tr></table></figure>
<p>表示使用sqlite3.exe来连接一个叫students的databse（db）。</p>
<p>然后输入：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">create table <span class="title">class1</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	ID	  <span class="keyword">int</span>		primary key 	<span class="keyword">not</span> null,</span></span></span><br><span class="line"><span class="function"><span class="params">	name  <span class="built_in">text</span>						<span class="keyword">not</span> null,</span></span></span><br><span class="line"><span class="function"><span class="params">	score <span class="keyword">int</span> 						<span class="keyword">not</span> null</span></span></span><br><span class="line"><span class="function"><span class="params">	)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这个过程发生了什么？</p>
<p>你在刚才打开的数据库中创建了一张表，表的名字是class1，定义表中的每一行的数据（即每一个学生的信息）分别为：ID、name、score。</p>
<p>其中ID的类型是int，而name的类型为text，socre的类型为int。后面的not null 表示不允许他们的值为空。而ID后面有个primary key，表示数据在存储时默认会以ID从小到大的顺序进行存储。</p>
<p>现在你可以输入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.tables</span><br></pre></td></tr></table></figure>
<p>来查看你刚刚建立的那张表，输入后你会看到你刚刚创建的这张表的名字。</p>
<p>接下来我们尝试把这三个学生的数据录入存到表中：<br>姓名：张三      序号：1     分数：50<br>姓名：李四         序号：2     分数：80<br>姓名：王五      序号：3     分数：100</p>
<p>输入这个指令：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">insert into class1 (ID, name, score) values(1, '张三', 50);</span><br></pre></td></tr></table></figure>
<p>这行指令的意思是，把ID=1，name=’张三’,score=50的信息，插入到了class1这个表中。</p>
<p>按下回车键，张三的信息就会被录入到数据库中了。如何查看此时的数据库中的数据呢？</p>
<p>你只需要：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">select * from class1;</span><br></pre></td></tr></table></figure>
<p>这行指令可以查看整个class1表的所有数据。</p>
<p>类似的，你不妨试一试把李四和王五的数据也录入到数据库。</p>
<p>我们知道了”select * from class1;”可以查看整个数据库的所有数据，那么如何只查看李四一人的数据呢？<br>你需要：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select * from class1 where name='王五';</span><br></pre></td></tr></table></figure>
<p>这时候你就可以从class1中取出name=’王五’的人的数据了。<br>那么前面这个星号*是什么意思呢？<br>他表示取出王五的所有数据（也就是ID、姓名、分数）。</p>
<p>如果我只需要取出王五的分数，不需要其他数据，那么我可以：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select score from class1 where name='王五';</span><br></pre></td></tr></table></figure>
<p>如果我要取出王五的ID和分数，那么我可以：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select ID,score from class1 where name='王五';</span><br></pre></td></tr></table></figure>
<p>如果我要从class1这个表中删除王五的数据，那么我可以：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">delete from class1 where name='王五'</span><br></pre></td></tr></table></figure>
<p>其实SQL语句的形式很接近自然语言，所以我们很容易看懂每句话的意思。至此，你已经学会了基本的创建、增删、查询的操作。</p>
<p>进一步学习可以参考：<a href="https://www.runoob.com/sqlite/sqlite-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/sqlite/sqlite-tutorial.html</a></p>
<p>本文地址： <a href="https://www.chimaoshu.top/非常简单的sqlite入门教程/">https://www.chimaoshu.top/非常简单的sqlite入门教程/</a> </p>
]]></content>
      <tags>
        <tag>sqlite</tag>
        <tag>sql</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>DS栈—波兰式，逆波兰式</title>
    <url>/DS%E6%A0%88%E2%80%94%E6%B3%A2%E5%85%B0%E5%BC%8F%EF%BC%8C%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="DS栈—波兰式，逆波兰式"><a href="#DS栈—波兰式，逆波兰式" class="headerlink" title="DS栈—波兰式，逆波兰式"></a>DS栈—波兰式，逆波兰式</h1><h2 id="某校数据结构课一道OJ题"><a href="#某校数据结构课一道OJ题" class="headerlink" title="某校数据结构课一道OJ题"></a>某校数据结构课一道OJ题</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>表达式有三种表示方法，分别为：</p>
<p>前缀表示(波兰式)：运算符+操作数1+操作数2</p>
<p>中缀表示：操作数1+运算符+操作数2</p>
<p>后缀表示(逆波兰式)：操作数1+操作数2+运算符</p>
<p>例如：a +b * (c -d ) - e/f</p>
<p>波兰式：-+a*b-cd/ef   （运算符在操作数的前面，用递归计算波兰式）</p>
<p>中缀式：a+b*c-d-e/f  </p>
<p>逆波兰式：abcd-*+ef/  （运算符在操作数的后面，用栈计算逆波兰式）</p>
<p>​    中缀表示就是原表达式去掉扣号。    </p>
<p>根据表达式求波兰式、逆波兰式都是教材第三章表达式求值的思想。   </p>
<p>​    求波兰式，需要操作数栈(注意不是计算结果入栈，有计算式入栈)，运算符栈。区别在于从后往前扫描表达式，‘(’ 换成’)’,’(‘换成‘)’。栈顶运算符优先级&gt;新读入运算符优先级出栈，表3.1中的相同运算符优先级&gt;（从左往右计算）改为&lt;，例如栈顶为‘+‘，新读入的为‘+’，则栈顶优先级&lt;新读入的优先级。</p>
<p>求逆波兰式，只需要运算符栈。操作数直接输出，操作符按表3.1优先级顺序出栈，输出。</p>
<p>​    输入表达式，求其波兰式和逆波兰式。</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p> 测试次数</p>
<p>每组测试数据一行，一个合法表达式</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p> 对每组测试数据，输出两行</p>
<p>第一行，表达式的波兰表示</p>
<p>第二行，表达式的逆波兰表示</p>
<p>不同组测试数据间以空行分隔。</p>
<h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4+2*3-10&#x2F;5</span><br><span class="line">12+3*5+(2+10)*5</span><br></pre></td></tr></table></figure>



<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\- + 4 * 2 3 &#x2F; 10 5</span><br><span class="line">4 2 3 * + 10 5 &#x2F; -</span><br><span class="line"></span><br><span class="line">+ + 12 * 3 5 * + 2 10 5</span><br><span class="line">12 3 5 * + 2 10 + 5 * +</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> space <span class="meta-string">' '</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">(<span class="keyword">char</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (a)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNumber</span><span class="params">(<span class="keyword">char</span> temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (temp != <span class="string">'+'</span> &amp;&amp; temp != <span class="string">'-'</span> &amp;&amp; temp != <span class="string">'*'</span> &amp;&amp; temp != <span class="string">'/'</span> &amp;&amp; temp != <span class="string">'('</span> &amp;&amp; temp != <span class="string">')'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆波兰式只要一个运算符栈就可以，数字直接输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reservePolish</span><span class="params">(<span class="built_in">string</span> expression)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; operatorStack; <span class="comment">// 运算符栈</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> theLastCharactorIsNumber = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> theFirst = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expression.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = expression[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'+'</span> || ch == <span class="string">'-'</span> || ch == <span class="string">'*'</span> || ch == <span class="string">'/'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (operatorStack.empty() || operatorStack.top() == <span class="string">'('</span>)</span><br><span class="line">                operatorStack.push(ch);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 逆波兰式这里有=，而波兰式没有=</span></span><br><span class="line">                <span class="keyword">while</span> (getPriority(operatorStack.top()) &gt;= getPriority(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!theFirst)</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; space;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; operatorStack.top();</span><br><span class="line">                    operatorStack.pop();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (operatorStack.empty())</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                operatorStack.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            theLastCharactorIsNumber = <span class="literal">false</span>;</span><br><span class="line">            theFirst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'('</span>) <span class="comment">// 这个不能做first</span></span><br><span class="line">        &#123;</span><br><span class="line">            operatorStack.push(ch);</span><br><span class="line">            theLastCharactorIsNumber = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">')'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operatorStack.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (operatorStack.top() == <span class="string">'('</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    operatorStack.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!theFirst)</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; space;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; operatorStack.top();</span><br><span class="line">                    operatorStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            theLastCharactorIsNumber = <span class="literal">false</span>;</span><br><span class="line">            theFirst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (theLastCharactorIsNumber || theFirst)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">flush</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; space &lt;&lt; ch &lt;&lt; <span class="built_in">flush</span>;</span><br><span class="line"></span><br><span class="line">            theLastCharactorIsNumber = <span class="literal">true</span>;</span><br><span class="line">            theFirst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (!operatorStack.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!theFirst)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; space;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; operatorStack.top();</span><br><span class="line">        operatorStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 波兰式：把)和(倒换，然后从后往前读,&gt;=变成&gt;，最后逆序输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polish</span><span class="params">(<span class="built_in">string</span> expression)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; operatorStack; <span class="comment">// 运算符栈</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; output;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> theLastCharactorIsNumber = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后往前</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = expression.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = expression[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'+'</span> || ch == <span class="string">'-'</span> || ch == <span class="string">'*'</span> || ch == <span class="string">'/'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (operatorStack.empty() || operatorStack.top() == <span class="string">')'</span>)</span><br><span class="line">                operatorStack.push(ch);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 逆波兰式这里有=，而波兰式没有=</span></span><br><span class="line">                <span class="keyword">while</span> (getPriority(operatorStack.top()) &gt; getPriority(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; operatorStack.top() &lt;&lt; " ";</span></span><br><span class="line">                    output.push(space);</span><br><span class="line">                    output.push(operatorStack.top());</span><br><span class="line">                    operatorStack.pop();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (operatorStack.empty())</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                operatorStack.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">')'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            operatorStack.push(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'('</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operatorStack.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (operatorStack.top() == <span class="string">')'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    operatorStack.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; operatorStack.top() &lt;&lt; " ";</span></span><br><span class="line">                    output.push(space);</span><br><span class="line">                    output.push(operatorStack.top());</span><br><span class="line">                    operatorStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从后往前读，而前一个读取的是数字，所以要</span></span><br><span class="line">            <span class="keyword">if</span> (!theLastCharactorIsNumber)</span><br><span class="line">            &#123;</span><br><span class="line">                output.push(space);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            output.push(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        theLastCharactorIsNumber = isNumber(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!operatorStack.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; operatorStack.top() &lt;&lt; " ";</span></span><br><span class="line">        output.push(space);</span><br><span class="line">        output.push(operatorStack.top());</span><br><span class="line">        operatorStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒叙输出</span></span><br><span class="line">    <span class="keyword">while</span> (!output.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = output.top();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断栈是否只剩最后一个空格（不输出最后一个空格）</span></span><br><span class="line">        <span class="keyword">if</span> (temp == space)</span><br><span class="line">        &#123;</span><br><span class="line">            output.pop();</span><br><span class="line">            <span class="keyword">if</span> (output.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; space &lt;&lt; <span class="built_in">flush</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">flush</span>;</span><br><span class="line">        output.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tryTimes;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; tryTimes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tryTimes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> expression;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; expression;</span><br><span class="line"></span><br><span class="line">        polish(expression);</span><br><span class="line">        reservePolish(expression);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i != tryTimes - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考资料：</p>
<p><a href="https://blog.csdn.net/linraise/article/details/20459751" target="_blank" rel="noopener">https://blog.csdn.net/linraise/article/details/20459751</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/141207867" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/141207867</a></p>
<p>本文地址： <a href="https://www.chimaoshu.top/DS栈—波兰式，逆波兰式/">https://www.chimaoshu.top/DS栈—波兰式，逆波兰式/</a> </p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>波兰式</tag>
        <tag>逆波兰式</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>为1M小水管的Minecraft服务器加速的各种尝试</title>
    <url>/%E4%B8%BA1M%E5%B0%8F%E6%B0%B4%E7%AE%A1%E7%9A%84Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>阿里云的学生机，10块钱一个月的那种，只有1Mbps的带宽。1Mbps是什么概念呢？就是公网下行带宽最大是<strong>1×1024÷8 = 128 kb/s</strong>，每秒最多128kb的速度，开mc服务器基本顶不住。一个只有三人的私人服务器，差不多两人就能把带宽占满，三人就开始卡，如何解决呢？</p>
<h3 id="首先从Minecraft服务器的设置出发"><a href="#首先从Minecraft服务器的设置出发" class="headerlink" title="首先从Minecraft服务器的设置出发"></a>首先从Minecraft服务器的设置出发</h3><p><a href="https://minecraft-zh.gamepedia.com/Server.properties" target="_blank" rel="noopener">Minecraft维基百科</a>上关于服务器的设置文件<strong>server.properties</strong>讲的非常清楚，其中有两处地方可以大大减少服务器的带宽，他们分别是：</p>
<p><img src="https://img-blog.csdnimg.cn/20200717083226118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200717083357514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200717110712671.png" alt="在这里插入图片描述"></p>
<p>其中<strong>network-compression-threshold</strong>与数据包的压缩有关，他的本质就是拿CPU资源去换带宽资源，我的设置是0，即压缩全部数据包。</p>
<p>而<strong>view-distance</strong>是玩家的视野距离，我一直开着1（最低配置），不过玩家几乎是感觉不到它的存在的，可以放心调低。</p>
<p>而第三个是Linux专用的，可以优化数据包的收发。</p>
<p>通过这两个配置，我的Minecraft服务器已经基本够3人玩了，但是3人的时候还是会轮流变卡，一看阿里云后台的公网出口带宽，都是全满的。还是需要解决问题！</p>
<h3 id="在本机运行Minecraft服务器，使用阿里云的服务器做中转？"><a href="#在本机运行Minecraft服务器，使用阿里云的服务器做中转？" class="headerlink" title="在本机运行Minecraft服务器，使用阿里云的服务器做中转？"></a>在本机运行Minecraft服务器，使用阿里云的服务器做中转？</h3><p>用frp进行端口映射，把本地的25565端口映射到云端上，这样用本机的CPU就会好一些，并且frp可以做压缩。</p>
<p>最终效果：比直接开在云端还慢，因为公网下行数据实际上更多了，阿里云需要在我的电脑和朋友的电脑之间做数据中转。效果很差，放弃了，强烈不推荐。</p>
<h3 id="P2P的Minecraft服务器？"><a href="#P2P的Minecraft服务器？" class="headerlink" title="P2P的Minecraft服务器？"></a>P2P的Minecraft服务器？</h3><p>既然做中转会受到阿里云的带宽限制，那如果我们使用P2P呢？直接在两台电脑直接建立对等连接，而云服务器只在一开始负责帮两台电脑建立连接，等到连接建立后，数据是不经过阿里云做中转的，直接在我的朋友的电脑直接流通。</p>
<p>于是我开始着手寻找能够进行P2P打洞的软件，刚开始用了frp的一个P2P打洞功能，叫做XTCP，服务端配置是这样的：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br></pre></td></tr></table></figure>

<p>我的电脑客户端配置是这样的：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 你的frp服务器的公网ip</span></span><br><span class="line"><span class="attr">server_addr</span> = xx.xx.xx.xxx</span><br><span class="line"><span class="comment"># 你的frp服务器的默认端口</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mc]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="comment"># 只有 sk 一致的用户才能访问到此服务</span></span><br><span class="line"><span class="attr">sk</span> = oc7D!PgY&amp;guFBPwoEfKq</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment"># 远程桌面的本地端口号</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">25565</span></span><br></pre></td></tr></table></figure>

<p>朋友的电脑客户端的配置是这样的：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 你的frp服务器的公网ip</span></span><br><span class="line"><span class="attr">server_addr</span> = xx.xx.xx.xx</span><br><span class="line"><span class="comment"># 你的frp服务器的默认端口</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mc_visitor]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="comment"># stcp 的访问者</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="comment"># 要访问的 stcp 代理的名字</span></span><br><span class="line"><span class="attr">server_name</span> = mc</span><br><span class="line"><span class="comment"># 只有 sk 一致的用户才能访问到此服务</span></span><br><span class="line"><span class="attr">sk</span> = oc7D!PgY&amp;guFBPwoEfKq</span><br><span class="line"><span class="comment"># 绑定本地端口用于访问 远程桌面 服务</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>

<p>这样，（理论上）只要朋友访问127.0.0.1:6000就能访问到我的电脑上的Minecraft服务器了。然而最终失败了，连接不能顺利地建立。本来frp的打洞功能也非常不成熟，受到NAT类型的影响。</p>
<p><strong>然后我又开始寻找其他的P2P解决方案，最终找到了NPS</strong></p>
<p>和frp一样，也是Github上开源的项目，也都是用Go语言写的。</p>
<p><a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">https://github.com/ehang-io/nps</a></p>
<p>于是开始了我的部署之路，安装过程只要照着(官方教程)[<a href="https://ehang-io.github.io/nps/#/install]来就行了。最终登陆管理面板是这样的：" target="_blank" rel="noopener">https://ehang-io.github.io/nps/#/install]来就行了。最终登陆管理面板是这样的：</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200717102417522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="管理面板"></p>
<p>然后照着官方教程，创建一个客户端：</p>
<p><img src="https://img-blog.csdnimg.cn/20200717103015637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="新建客户端"></p>
<p>参数可以随便填，然后复制最下面红色的那行命令：</p>
<p><img src="https://img-blog.csdnimg.cn/20200717103158542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="复制"></p>
<p>然后下载nps的客户端到我运行Minecraft服务器的本机电脑，打开cmd切换到客户端exe所在的目录下，把命令复制进去运行。注意这里不能使用PowerShell，否则会连接不上。如果cmd显示无法运行，就把那行命令前面的./去掉。</p>
<p>之后去创建一个P2P连接，客户端ID要和上面我们创建的客户端的ID一致。</p>
<p><img src="https://img-blog.csdnimg.cn/20200717103614392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="P2P连接"></p>
<p>然后像前面一样，复制最下面的命令：</p>
<p><img src="https://img-blog.csdnimg.cn/20200717103831997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="复制命令"></p>
<p>其中那个“唯一表示密钥”是自动生成的。然后同理让朋友在他自己电脑上下载nps的客户端并cmd运行命令。之后朋友只要在mc服务器的地址填上”127.0.0.1:2000”（默认端口是2000，可以自己换），就能访问到我本机开在127.0.0.1:25565的Minecraft服务器了。</p>
<p>现在带宽已经没问题了，但是朋友还是反馈很卡，也找不出原因，所以就暂时放弃了这个方案。</p>
<h3 id="阿里云不同实例内网互联-另一台服务器流量转发？"><a href="#阿里云不同实例内网互联-另一台服务器流量转发？" class="headerlink" title="阿里云不同实例内网互联+另一台服务器流量转发？"></a>阿里云不同实例内网互联+另一台服务器流量转发？</h3><p>因为阿里云所谓的1Mbps的带宽限制，只是公网下行带宽的限制，对其他带宽（比如上行带宽、或者内网带宽）是没有限制的。我和同学在不同的阿里云账号下各拥有一台阿里云服务器，并且在同地域（这意味着内网互联是免费的）。于是我就有了另一个思路，依然把Minecraft服务器开在一台云服务器上，但是一部分玩家的流量直连云服务器，另一部分玩家通过连接另一台闲置的云服务器，然后由闲置的云服务器把流量转发到Minecraft服务器。这样带宽就变成两台服务器加起来2Mbps了。</p>
<p>首先是探索了半天阿里云的内网互联，由于阿里云的业务一直变化，所以网上找到的教程全都过期了，只好去看阿里云官方的文档。</p>
<p>首先你要在专有网络–快速链接–高速通道，找到云企业网，然后创建云企业网实例。</p>
<p><img src="https://img-blog.csdnimg.cn/20200717105028243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="云企业网"></p>
<p>先把你自己账号下的实例绑定进去，之后照着阿里云文档操作。</p>
<p><a href="https://help.aliyun.com/document_detail/64648.html" target="_blank" rel="noopener">阿里云帮助文档</a></p>
<p>然后登陆同学的账号，进行企业网授权，详情查看搜索阿里云文档关于授权部分内容。之后再登陆你的账户把同学的实例加入企业网，这样两个实例就可以通网了。</p>
<p>之后，使用frp，把Minecraft服务器的25565端口映射到另一台服务器上（记得ip不要填公网ip，要填内网ip，这样才不会占用公网下行带宽），就可以了，具体不再赘述。你也可以配置服务器的防火墙规则或者使用Nginx做端口转发，也是可以的。</p>
<p>用frp的优点是他可以进行数据压缩，进一步减少了带宽。</p>
<p>总的来说，这个方案的效果还不错。</p>
<p>本文地址： <a href="https://www.chimaoshu.top/为1M小水管的Minecraft服务器加速/">https://www.chimaoshu.top/为1M小水管的Minecraft服务器加速/</a> </p>
]]></content>
      <tags>
        <tag>Minecraft</tag>
        <tag>阿里云</tag>
        <tag>P2P</tag>
      </tags>
  </entry>
  <entry>
    <title>在win10自用机上使用Nginx+Docker部署bitwarden_rs</title>
    <url>/%E5%9C%A8win10%E8%87%AA%E7%94%A8%E6%9C%BA%E4%B8%8A%E4%BD%BF%E7%94%A8Nginx-Docker%E9%83%A8%E7%BD%B2bitwarden-rs/</url>
    <content><![CDATA[<h2 id="最初的想法"><a href="#最初的想法" class="headerlink" title="最初的想法"></a>最初的想法</h2><p>从很久之前就一直想要找到1Password的替代品，当时自己用AES256 + RSA2048的加密方式，写一个服务端和客户端，只能在终端黑窗口里面运行，总归没有这些成熟的产品用得爽。后来了解到了Bitwarden，想部署到服务器上，想了想不如部署到本机上吧，不然服务器一到期就一直得续费。原版的Bitwarden服务端的服务对象是比较广的，资源消耗也比较大，总归不是办法。后来了解到Bitwarden_rs，是大佬用Rust重新写的一个不那么耗费资源的版本，就决定是它了。</p>
<h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><h3 id="首先是Bitwarden的部署"><a href="#首先是Bitwarden的部署" class="headerlink" title="首先是Bitwarden的部署"></a>首先是Bitwarden的部署</h3><p>首先需要在win10上安装Docker，不再赘述。<br>然后根据 <a href="https://github.com/dani-garcia/bitwarden_rs" target="_blank" rel="noopener">Github上官方给出的说明</a> ，只要打开命令行，输入下面命令就可以安装完成并部署到localhost中。</p>
<p>首先拉取镜像：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker pull bitwardenrs/server:latest</span><br></pre></td></tr></table></figure>
<p>然后是运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> -<span class="literal">-name</span> bitwarden <span class="literal">-v</span> /把这个路径换成你本机要存储的数据的绝对路径/:/<span class="keyword">data</span>/ <span class="literal">-p</span> <span class="number">80</span>:<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">80</span> bitwardenrs/server:latest</span><br></pre></td></tr></table></figure>
<p>如果要开启管理面板就加个参数，把上面命令换成这个：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> -<span class="literal">-name</span> bitwarden <span class="literal">-e</span> ADMIN_TOKEN=换成你的管理面板登陆密码 <span class="literal">-v</span> /把这个路径换成你本机要存储的数据的绝对路径/:/<span class="keyword">data</span>/ <span class="literal">-p</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">80</span>:<span class="number">80</span>  bitwardenrs/server:latest</span><br></pre></td></tr></table></figure>
<p>记得把路径换成你本机要存储这些密码数据的路径，如果不设置的话，你电脑一关机，数据就都没了。</p>
<p>当然你也可以把127.0.0.1:80:80中的”127.0.0.1:80”换成你要部署的本机ip的端口，如果想要部署在0.0.0.0（所有指向本机的ip）就直接输入80:80就好了。由于后面我要用Nginx进行反向代理，所以我是部署在了127.0.0.1。</p>
<p>只要你的Docker是正常的（包括网络连接正常），那么运行这两行命令之后，在浏览器访问<a href="http://localhost就可以正常访问到了。" target="_blank" rel="noopener">http://localhost就可以正常访问到了。</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200711095836893.png" alt="bitwarden"></p>
<p>现在你已经可以在本机使用Bitwarden的服务了，如果想让自己的手机或其他设备也安全地用上，请继续往下看。</p>
<h3 id="接下来是Nginx进行反向代理"><a href="#接下来是Nginx进行反向代理" class="headerlink" title="接下来是Nginx进行反向代理"></a>接下来是Nginx进行反向代理</h3><p>先到Nginx官网<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a>上下载最新的适用于Windows的Nginx<br><img src="https://img-blog.csdnimg.cn/20200711102432429.png" alt="Nginx官网"><br><img src="https://img-blog.csdnimg.cn/20200711102552703.png" alt="Nginx下载"><br>下载Nginx压缩包之后找一个文件夹解压，我解压到了/bitwarden文件夹下。</p>
<p>然后再bitwarden/conf/目录下创建一个文件夹，命名为cert。</p>
<p>然后去给你的域名申请一个HTTPS证书，我是用了阿里云免费的证书，下载Nginx版本的证书（包含xxx.key和xxx.pem两个文件），然后把这两个文件放到cert下面。</p>
<p>然后编辑bitwarden/conf/nginx.conf 的配置，如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment">#SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span></span><br><span class="line">        <span class="attribute">server_name</span> localhost; <span class="comment">#将localhost修改为您证书绑定的域名，例如：www.example.com。</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span> cert/domain name.pem; <span class="comment">#将domain name.pem替换成您证书的文件名。</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> cert/domain name.key; <span class="comment">#将domain name.key替换成您证书的密钥文件名。</span></span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; <span class="comment">#使用此加密套件。</span></span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#使用该协议进行配置。</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后记得设置域名的解析记录，把你要的域名解析到你电脑的IP地址，之后就能通过域名进行https访问了。</p>
<p>我是解析到了我的内网IP地址，所以说我的手机需要和电脑连接同一个wifi才能访问到电脑的服务器。如果你想要让所有设备都能访问，那么可以用frp把你的电脑的443端口映射到云服务器上，同时把域名解析的ip设置你的云服务器的ip。（或者直接把bitwarden部署到你的云服务器上）</p>
<p>至此，已经可以使用https的方式，访问服务器了，部署已经完成。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Bitwarden提供了多种客户端，有安卓、IOS的APP端、浏览器web端、浏览器插件、win、linux、macOS的桌面端、甚至还有好几个命令行的版本，全部可以从官网下载。<a href="https://bitwarden.com/#download" target="_blank" rel="noopener">https://bitwarden.com/#download</a></p>
<h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ProcessName</span> = <span class="string">"docker desktop"</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">get-process</span> <span class="variable">$ProcessName</span> <span class="literal">-ErrorAction</span> SilentlyContinue) <span class="operator">-eq</span> <span class="variable">$Null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    echo <span class="string">"Docker is not running,strating...."</span> </span><br><span class="line">    start <span class="string">"Docker Desktop"</span></span><br><span class="line">    sleep <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">    echo <span class="string">"Process is running."</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">docker start bitwarden</span><br><span class="line">.\nginx</span><br></pre></td></tr></table></figure>

<p>将脚本保存为xxx..ps1，然后把这个脚本放到与Nginx.exe同目录下，把docker.exe的快捷方式也放到这个目录下（或者设置docker为开机启动）。</p>
<p>你可以把这个脚本设置为开机启动，你可以另外写一个run.bat</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">powershell .\run.ps1</span><br></pre></td></tr></table></figure>

<p>然后win+r，输入shell:startup后回车，打开控制开机自启动的文件目录，然后把这个bat的快捷方式放进去文件夹，之后开机就会自启动了。</p>
<h2 id="结束脚本"><a href="#结束脚本" class="headerlink" title="结束脚本"></a>结束脚本</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">.\nginx -s stop</span><br><span class="line">docker stop <span class="number">822</span>faa38fd55</span><br><span class="line">choice /t <span class="number">2</span> /d y /n &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure>
<p>其中822faa38fd55指的是容器的ID（可以通过docker ps -a来查看容器的ID）<br>将脚本保存为xxx.bat</p>
<p>本文地址： <a href="https://www.chimaoshu.top/在win10自用机上使用Nginx-Docker部署bitwarden-rs/">https://www.chimaoshu.top/在win10自用机上使用Nginx-Docker部署bitwarden-rs/</a> </p>
]]></content>
  </entry>
  <entry>
    <title>关于win10下深信服sslvpn的客户端流量分流/不同网卡流量分流</title>
    <url>/%E5%85%B3%E4%BA%8E%E6%B7%B1%E4%BF%A1%E6%9C%8Dsslvpn%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B5%81%E9%87%8F%E5%88%86%E6%B5%81/</url>
    <content><![CDATA[<p>​    如果你的单位或学校使用了深信服的sslvpn，有时候会有需要流量分流的场景，比如访问internet不直连而是走了sslvpn，比如sslvpn设定的路由策略与其他连接冲突导致无法上公网之类的问题。</p>
<p>踩了一下午坑，终于解决了问题。</p>
<p>​    解决的方法是修改路由表。通过修改路由表可以实现对不同的ip段走不同的连接模式。</p>
<p>​    如果你够细心的话，会发现用了深信服的vpn电脑会多了一个网络适配器<br><img src="https://pic.chimaoshu.top/imgs/2020/05/e83458ea7b3e6f93.png" alt="适配器"></p>
<p>理论上这个方法不止可以用于深信服的vpn，只要是多个网卡/网络适配器的分流都适用。</p>
<p>打开cmd，输入 ipconfig/all 查看你要分流的两个网卡/网络适配器的网关ip</p>
<p><img src="https://pic.chimaoshu.top/imgs/2020/05/18cfa245bb84a06e.png" alt="这个2开头的ip地址是虚拟的ip地址"></p>
<p>然后输入 route print -4 显示ipv4的路由规则</p>
<p><img src="https://pic.chimaoshu.top/imgs/2020/05/0ba81623e8b3ae78.png" alt="路由表"><br>可以看到路由表规定了不同的目标ip（包括目标的子网掩码）会走不同的网关，所以我们可以用<br>route add 和 route delete 命令对路由表进行删改，至于具体命令用法，百度一大堆，不再赘述，而且我也忘了。</p>
<p>本文地址： <a href="https://www.chimaoshu.top/关于深信服sslvpn的客户端流量分流/">https://www.chimaoshu.top/关于深信服sslvpn的客户端流量分流/</a> </p>
]]></content>
      <tags>
        <tag>深信服</tag>
        <tag>vpn</tag>
        <tag>分流</tag>
      </tags>
  </entry>
  <entry>
    <title>filezilla配置ssl证书过程中出现&#39;Failed to load SSL Libraries&#39;、&#39;Cannot create certificate.Failed to initialize SSL library&#39;、&#39;Could not load certificate file: error:02001003:system library:fopen:No such process (0)&#39;</title>
    <url>/filezilla%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0-Failed-to-load-SSL-Libraries-%E3%80%81-Cannot-create-certificate-Failed-to-initialize-SSL-library-%E3%80%81-Could-not-load-certificate-file-error-02001003-system-library-fopen-No-such-process-0/</url>
    <content><![CDATA[<p>‘Failed to load SSL Libraries’<br>‘Cannot create certificate.Failed to initialize SSL library’<br>以上两个问题的解决方法：<br>1.系统更新<br>2.卸载干净，然后从官网下载安装最新的版本<br>3.不要用中文版的filezilla server</p>
<p>‘Could not load certificate file: error:02001003:system library:fopen:No such process (0)’<br>解决方法：<br>1.检查证书所在文件夹是否有赋予足够的用户权限<br>2.以管理员身份运行filezilla server<br>3.证书的存放路径不要有中文</p>
<p>本文地址： <a href="https://www.chimaoshu.top/filezilla配置ssl证书过程中出现-Failed-to-load-SSL-Libraries-、-Cannot-create-certificate-Failed-to-initialize-SSL-library-、-Could-not-load-certificate-file-error-02001003-system-library-fopen-No-such-process-0/">https://www.chimaoshu.top/filezilla配置ssl证书过程中出现-Failed-to-load-SSL-Libraries-、-Cannot-create-certificate-Failed-to-initialize-SSL-library-、-Could-not-load-certificate-file-error-02001003-system-library-fopen-No-such-process-0/</a> </p>
]]></content>
      <tags>
        <tag>filezilla</tag>
        <tag>ssl</tag>
        <tag>certificate</tag>
      </tags>
  </entry>
  <entry>
    <title>ImportError cannot import name &#39;&#39;DerBitString&#39;&#39; from &#39;&#39;Crypto.Util.asn1&#39;&#39;</title>
    <url>/ImportError-cannot-import-name-DerBitString-from-Crypto-Util-asn1/</url>
    <content><![CDATA[<p>今天用到 PyCryptodome 模块的时候，当我用到了 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br></pre></td></tr></table></figure>
<p>的时候，出现了错误：<br>ImportError : cannot import name ‘’DerBitString’’ from ‘’Crypto.Util.asn1’’。<br>找到了<a href="http://program.dengshilong.org/2018/10/11/%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5DerBitString%E9%94%99%E8%AF%AF/" target="_blank" rel="noopener">这篇博客</a>和<a href="https://pycryptodome.readthedocs.io/en/latest/src/faq.html#why-do-i-get-the-error-no-module-named-crypto-on-windows" target="_blank" rel="noopener">官方文档</a>，都提到了Windows下同时安装PyCryptodome和PyCrypto会出现这个问题。<br>给出的解决方案是：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip uninstall crypto</span><br><span class="line">pip uninstall pycryptodome</span><br><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure>
<p>但我并没有安装crypto模块也出现了问题，后来发现只要</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip uninstall pycryptodome</span><br><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure>
<p>重新装一下pycryptodome问题就解决了。</p>
<p>本文地址： <a href="https://www.chimaoshu.top/ImportError-cannot-import-name-DerBitString-from-Crypto-Util-asn1/">https://www.chimaoshu.top/ImportError-cannot-import-name-DerBitString-from-Crypto-Util-asn1/</a> </p>
]]></content>
      <tags>
        <tag>DerBitString</tag>
        <tag>PyCryptodome</tag>
        <tag>importError</tag>
      </tags>
  </entry>
  <entry>
    <title>（详细版）基于frp与v2ray的几种校园网内网穿透的方案</title>
    <url>/%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89%E5%9F%BA%E4%BA%8Efrp%E4%B8%8Ev2ray%E7%9A%84%E5%87%A0%E7%A7%8D%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>非零基础请移步<a href="\（简略版）基于frp与v2ray的几种校园网内网穿透的方案\">（简略版）基于frp与v2ray的几种校园网内网穿透的方案</a></p>
<p><a href="#0">设备</a></p>
<p><a href="#1">方案一:简单的frp socks5/http代理</a></p>
<p><a href="#2">方案二：用frp映射v2ray的inbound端口+校外设备http/socks5代理</a></p>
<p><a href="#3">方案三：用frp映射v2ray的inbound端口+校外设备使用v2ray/ssr连接</a></p>
<p><a href="#4">方案四：用v2ray自带的反向代理功能</a></p>
<p><a href="#5">方案五：用路由器代替校内主机</a></p>
<a id="more"></a>

<h1 id= '0'> 设备 </h1>

<h2 id="通讯过程的三台设备："><a href="#通讯过程的三台设备：" class="headerlink" title="通讯过程的三台设备："></a>通讯过程的三台设备：</h2><h3 id="A-校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。"><a href="#A-校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。" class="headerlink" title="A.校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。"></a>A.校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。</h3><h3 id="B-一台拥有公网ip的设备，一般是VPS云主机之类的"><a href="#B-一台拥有公网ip的设备，一般是VPS云主机之类的" class="headerlink" title="B.一台拥有公网ip的设备，一般是VPS云主机之类的"></a>B.一台拥有公网ip的设备，一般是VPS云主机之类的</h3><h3 id="C-任意想要在校外访问校园网的设备"><a href="#C-任意想要在校外访问校园网的设备" class="headerlink" title="C.任意想要在校外访问校园网的设备"></a>C.任意想要在校外访问校园网的设备</h3><p><img src="https://img-blog.csdnimg.cn/20200311224941794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="示意图"></p>
<h1 id= '1'> 方案一:简单的frp socks5/http代理</h1>


<p><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">frp在github的下载地址</a></p>
<p>以Windows为例</p>
<p>下载后解压<br>把frps.exe和frps.ini拷贝到你拥有公网ip的主机。<br>把frpc.exe和frpc.ini拷贝到校内的主机。<br>顾名思义，s就是server，c就是client。</p>
<p>在云主机上进行frps.ini配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 12345(填写你要用来和校内主机建立连接的端口，注意检查防火墙）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e （相当于密码，要与frpc.ini中的token保持一致）</span><br></pre></td></tr></table></figure>
<p>这是最简单配置，更多配置请戳<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener"> frp官方中文文档</a></p>
<p>运行frps：<br>打开cmd，切换到frps.exe所在的目录，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frps.exe -c frps.ini</span><br></pre></td></tr></table></figure>

<p>出现以下文字则启动成功<br><img src="https://img-blog.csdnimg.cn/20200312111727240.png" alt="启动成功"><br>然后在校内跳板机配置frpc.ini：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 12.34.56.78（上面配置frps的主机的公网ip）</span><br><span class="line">server_port = 12345 （上面的bind_port填哪个这里就填哪个）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e（与上面token保持一致）</span><br><span class="line">pool_count = 5 （与服务端通信时预设的连接池数量，如果对连接速度有要求可以设大一些）</span><br><span class="line"></span><br><span class="line">[socks5_proxy]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8080 （设置远程云主机的8080端口为监听端口，可供校外机器连接）</span><br><span class="line">plugin = socks5</span><br><span class="line">use_encryption = <span class="literal">true</span> （加  密  通  讯）</span><br><span class="line"><span class="comment">#如果不想设置用户名密码就把下面两行删掉，因为有的浏览器不支持身份认证</span></span><br><span class="line">plugin_http_user = xxx （用户名）</span><br><span class="line">plugin_http_passwd = xxxxxx （密码）</span><br></pre></td></tr></table></figure>
<p>如果不想要socks5代理，也可以换成http代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 12.34.56.78（上面配置frps的主机的公网ip）</span><br><span class="line">server_port = 12345 （上面的bind_port填哪个这里就填哪个）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e（与上面token保持一致）</span><br><span class="line">pool_count = 5 （与服务端通信时预设的连接池数量，如果对连接速度有要求可以设大一些）</span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8080（设置远程云主机的8080端口为监听端口，可供校外机器连接）</span><br><span class="line">plugin = http_proxy</span><br><span class="line">use_encryption = <span class="literal">true</span> （加  密  通  讯）</span><br><span class="line"><span class="comment">#如果不想设置用户名密码就把下面两行删掉，因为有的浏览器不支持身份认证</span></span><br><span class="line">plugin_http_user = xxx</span><br><span class="line">plugin_http_passwd = xxxx</span><br></pre></td></tr></table></figure>
<p>比较鸡肋的就是<br>frp的http_proxy好像只能访问http，不能访问https网站</p>
<p>运行frpc:<br>打开cmd，切换到frpc.exe所在的目录，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure>
<p>出现以下文字则连接成功：<br><img src="https://img-blog.csdnimg.cn/20200312114900133.png" alt="连接成功"><br>现在socks5代理/http代理已经搭建完成<br>只要在校外主机的浏览器设置代理就可以访问校内网络了：<br><img src="https://img-blog.csdnimg.cn/20200312115224804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="设置代理"><br>通讯过程：校外设备向云主机发送网络请求，然后云主机把请求交给校内设备代理，校内设备进行代理，通过云主机返回校外设备请求的内容。</p>
<h1 id= '2'>方案二：用frp映射v2ray的inbound端口+校外设备http/socks5代理</h1>


<p>该方案适用于校外设备无法使用v2ray的情况</p>
<p>值得一提的是，socks5的数据都是没有经过加密的明文数据，所以方案二与方案一并不被推荐</p>
<p>思路：在校内设备搭建一个v2ray的代理，将v2ray的inbound设为socks5流量，然后把这个inbound端口通过frp映射到云主机上。校外设备则通过socks5或http代理访问校内外。</p>
<p>仍然以Windows为例</p>
<p>首先云主机配置frps.ini:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 12345(填写你要用来和校内主机建立连接的端口，注意检查防火墙）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e （相当于密码，要与frpc.ini中的token保持一致）</span><br></pre></td></tr></table></figure>
<p>然后打开cmd，切换到frps.exe所在目录运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frps.exe -c frps.ini</span><br></pre></td></tr></table></figure>
<p>完成云主机的配置</p>
<p>然后是校内设备搭建v2ray与frp：<br>&emsp;&emsp;首先是v2ray:<br>&emsp;&emsp;&emsp;&emsp;<a href="https://github.com/2dust/v2rayN/releases/download/3.7/v2rayN-Core.zip" target="_blank" rel="noopener">github的v2rayN下载地址</a><br>&emsp;&emsp;&emsp;&emsp;然后在随意位置新建一个123.json，进行编辑：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"inbounds"</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">"port"</span>: 10808, //填监听端口，自己决定</span><br><span class="line">     <span class="string">"protocol"</span>: <span class="string">"socks"</span>, </span><br><span class="line">     <span class="string">"sniffing"</span>: &#123;</span><br><span class="line">       <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">"destOverride"</span>: [<span class="string">"http"</span>, <span class="string">"tls"</span>]</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">"settings"</span>: &#123;</span><br><span class="line">       <span class="string">"auth"</span>: <span class="string">"noauth"</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"outbounds"</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">     <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;&emsp;&emsp;然后打开v2rayN.exe<br>&emsp;&emsp;&emsp;&emsp;左上角“服务器–添加自定义服务器”<br>   &emsp;&emsp;&emsp;&emsp;<img src="https://img-blog.csdnimg.cn/20200312132503537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="添加服务器"><br>&emsp;&emsp;&emsp;&emsp;然后选择刚才编辑的123.config导入，就能在列表看到导入的配置了<br>&emsp;&emsp;&emsp;&emsp;然后在右下角任务栏选择启动刚才配置的服务器<br>&emsp;&emsp;&emsp;&emsp;<img src="https://img-blog.csdnimg.cn/20200312133221411.png" alt="选择服务器"><br>&emsp;&emsp;&emsp;&emsp;然后选择”Http代理”，开启全局模式<br>&emsp;&emsp;&emsp;&emsp;之后可以看到v2ray的UI最下边的一行代理地址：<br><img src="https://img-blog.csdnimg.cn/20200312133500287.png" alt="代理地址"><br>&emsp;&emsp;现在v2ray配置完成了，接下来配置frpc.ini:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common] <span class="comment">#common和前面的一样，不再赘述</span></span><br><span class="line">server_addr = 12.34.56.78</span><br><span class="line">server_port = 12345</span><br><span class="line">token = 8d283ya2-6dba-4a8d</span><br><span class="line">pool_count = 5</span><br><span class="line"></span><br><span class="line">[v2ray_mapping]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8083 <span class="comment">#你的云主机上可供校外设备挂代理的端口</span></span><br><span class="line">local_port = 10809 <span class="comment">#校内设备本地http的端口，参考上一张图</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;&emsp;&emsp;然后一样是打开cmd切换到所在目录，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这样frpc也配置完成。</p>
<p>在校内设备的配置完成,<br>接下来就是校外设备设置代理了：</p>
<p>以win10为例，打开系统代理设置<br>填入云主机的ip和http的端口<br><img src="https://img-blog.csdnimg.cn/20200312134652434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="win10设置"><br>就可以使用校内设备的代理了</p>
<p>当然，这样是整个系统使用校内代理，比较麻烦。</p>
<p>推荐用浏览器插件 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="noopener">SwitchyOmega</a><br>设置校园网专用的代理，如图：<br><img src="https://img-blog.csdnimg.cn/2020031213523693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后可以在auto switch中设置自动切换<br><img src="https://img-blog.csdnimg.cn/20200312135350737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="自动切换"><br>在访问校园网时会自动切换为使用刚才配置的代理。</p>
<h1 id= '3'>方案三：用frp映射v2ray的inbound端口+校外设备使用v2ray/ssr连接</h1>


<p>该方案适用于校外设备可以使用v2ray的情况。<br>校内设备和云主机的配置过程和上述方案二大同小异。</p>
<p>其中v2ray的123.json配置需要换为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"inbounds"</span>: [</span><br><span class="line">  	//当然，v2ray也支持ssr。所以下面的这段配置也可以换成ssr配置</span><br><span class="line">  	//然后校外设备就可以用ssr连接</span><br><span class="line">  	//由于我不懂ssr配置，所以就不放出来了</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"port"</span>: 10809, // 本地监听端口</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,   </span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"clients"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"123456"</span>,  // 用户ID（相当于ssr中的密码），客户端与服务器只要保持相同即可</span><br><span class="line">            <span class="string">"alterId"</span>: 64 //客户端与服务端须保持相同</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,  // 传出协议</span><br><span class="line">      <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他的都一样</p>
<p>最后是校外设备设置代理，以Windows为例：<br>打开v2rayN.exe，然后左上角”服务器–添加vmess服务器”，<br>填写参数：<br><img src="https://img-blog.csdnimg.cn/20200312142508878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="添加VMess"><br>点击确定即可。<br>然后是安卓，先<a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">v2rayNG github下载</a>，然后也是一样的配置。</p>
<h1 id= '4'>方案四：用v2ray自带的反向代理功能</h1>


<p>我没有试过这种方案，所以只能放个<a href="https://toutyrater.github.io/app/reverse2.html" target="_blank" rel="noopener">文档链接</a></p>
<p>该方案需要三方设备都使用v2ray</p>
<h1 id= '5'>方案五：用路由器代替校内主机</h1>


<p>众所周知，路由器可以刷各种固件。有些固件比如梅林或者老毛子之类的本身就自带v2ray和frp。<br>放假回家如果在校内没有跳板机，不妨试试路由器。<br>网上可以找到很多刷固件的教程。</p>
<p>接下来以老毛子为例进行说明。</p>
<p>首先校内的路由器必须要能上校外网络，很多学校是使用drcom的，对于drcom登录的，可以参考<a href="https://www.right.com.cn/forum/thread-215978-1-1.html" target="_blank" rel="noopener">这篇文章</a></p>
<p>或者直接ssh路由器，然后运行某些登录脚本。</p>
<p>frp设置和前面的没什么不同，路由器可以充当frpc或者frps，我们要让路由器充当frpc。</p>
<p>frp设置：<br>勾选“启动frpc客户端”，后面配置和前面的一样<br><img src="https://img-blog.csdnimg.cn/20200312151058521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="frp"><br>v2ray配置：<br>开启透明代理，设置透明代理窗口1099<br>（如果你这个路由器不想用于平时上网，可以不用勾选）<br><img src="https://img-blog.csdnimg.cn/20200312151236279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="v2ray"><br>然后进行config.json的配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      //这个是透明代理的inbound，平时连路由器上网的流量走这里</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"transparent"</span>,</span><br><span class="line">      <span class="string">"port"</span>: 1099,</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">        <span class="string">"followRedirect"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"sniffing"</span>: &#123;</span><br><span class="line">        <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"destOverride"</span>: [<span class="string">"http"</span>, <span class="string">"tls"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="string">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="string">"tproxy"</span>: <span class="string">"tproxy"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      //这个是校外跳进来的inbound，校外的流量走这里</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"vmess-mapping"</span>,</span><br><span class="line">      <span class="string">"port"</span>: 10809, // 本地监听端口</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"clients"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"123456"</span>, // 用户ID（相当于ssr中的密码），客户端与服务器只要保持相同即可</span><br><span class="line">            <span class="string">"alterId"</span>: 64 //客户端与服务端须保持相同</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"direct"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      //如果这个路由器还想用于平时上网，</span><br><span class="line">      //可以自行添加自己平时  上    网  的配置，</span><br><span class="line">      //然后在rules里面添加路由规则</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"routing"</span>: &#123;</span><br><span class="line">    <span class="string">"domainStrategy"</span>: <span class="string">"IPOnDemand"</span>,</span><br><span class="line">    <span class="string">"rules"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这个路由器还想用于平时上网，<br>可以自行添加自己平时上网的服务器配置，<br>然后在rules里面添加路由规则。</p>
<h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>本文地址： <a href="https://www.chimaoshu.top/（详细版）基于frp与v2ray的几种校园网内网穿透的方案/">https://www.chimaoshu.top/（详细版）基于frp与v2ray的几种校园网内网穿透的方案/</a> </p>
]]></content>
      <tags>
        <tag>v2ray</tag>
        <tag>frp</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>（简略版）基于frp与v2ray的几种校园网内网穿透的方案</title>
    <url>/%EF%BC%88%E7%AE%80%E7%95%A5%E7%89%88%EF%BC%89%E5%9F%BA%E4%BA%8Efrp%E4%B8%8Ev2ray%E7%9A%84%E5%87%A0%E7%A7%8D%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>如果是零基础，请移步<a href="\（详细版）基于frp与v2ray的几种校园网内网穿透的方案\">（详细版）基于frp与v2ray的几种校园网内网穿透的方案</a></p>
<p><a href="#1">方案一:简单的frp socks5/http代理</a></p>
<p><a href="#2">方案二：用frp映射v2ray的inbound端口+校外设备http/socks5代理</a></p>
<p><a href="#3">方案三：用frp映射v2ray的inbound端口+校外设备使用v2ray/ssr连接</a></p>
<p><a href="#4">方案四：用v2ray自带的反向代理功能</a></p>
<p><a href="#5">方案五：用路由器代替校内主机</a></p>
<a id="more"></a>

<h3 id="通讯过程的三台设备："><a href="#通讯过程的三台设备：" class="headerlink" title="通讯过程的三台设备："></a>通讯过程的三台设备：</h3><h4 id="A-校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。"><a href="#A-校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。" class="headerlink" title="A.校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。"></a>A.校内跳板机，电脑路由器之类的设备，前提是能够访问校外网络。</h4><h4 id="B-一台拥有公网ip的设备，一般是VPS云主机之类的"><a href="#B-一台拥有公网ip的设备，一般是VPS云主机之类的" class="headerlink" title="B.一台拥有公网ip的设备，一般是VPS云主机之类的"></a>B.一台拥有公网ip的设备，一般是VPS云主机之类的</h4><h4 id="C-任意想要在校外访问校园网的设备"><a href="#C-任意想要在校外访问校园网的设备" class="headerlink" title="C.任意想要在校外访问校园网的设备"></a>C.任意想要在校外访问校园网的设备</h4><p><img src="https://img-blog.csdnimg.cn/20200311224941794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="示意图"></p>
<h1 id='1'> 方案一:简单的frp socks5/http代理 </h1>


<p>VPS（frps.ini）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 12345(要用来和校内主机建立连接的端口，注意检查防火墙）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e （相当于密码，要与frpc.ini中的token保持一致）</span><br></pre></td></tr></table></figure>
<p>然后启动frps</p>
<p>跳板机：(frpc.ini)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 12.34.56.78（公网ip）</span><br><span class="line">server_port = 12345 （上面的bind_port填哪个这里就填哪个）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e（与上面token保持一致）</span><br><span class="line">pool_count = 5 （与服务端通信时预设的连接池数量）</span><br><span class="line"></span><br><span class="line">[socks5_proxy]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8080 （设置远程云主机的8080端口为监听端口，可供校外机器连接）</span><br><span class="line">plugin = socks5</span><br><span class="line">use_encryption = <span class="literal">true</span> </span><br><span class="line"><span class="comment">#如果不想设置用户名密码就把下面两行删掉，因为有的浏览器不支持身份认证</span></span><br><span class="line">plugin_http_user = xxx （用户名）</span><br><span class="line">plugin_http_passwd = xxxxxx （密码）</span><br></pre></td></tr></table></figure>
<p>如果不想要socks5代理，也可以换成http代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 12.34.56.78（公网ip）</span><br><span class="line">server_port = 12345 （VPS端口，与上面一致）</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e（与上面token保持一致）</span><br><span class="line">pool_count = 5 （与服务端通信时预设的连接池数量，如果对连接速度有要求可以设大一些）</span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8080</span><br><span class="line">plugin = http_proxy</span><br><span class="line">use_encryption = <span class="literal">true</span> </span><br><span class="line">plugin_http_user = xxx</span><br><span class="line">plugin_http_passwd = xxxx</span><br></pre></td></tr></table></figure>
<p>然后启动frps</p>
<p>比较鸡肋的就是，<br>frp自带的http_proxy好像只能访问http，不能访问https网站</p>
<p>之后只要在校外主机的浏览器设置代理就可以访问校内网络了：<br><img src="https://img-blog.csdnimg.cn/20200312115224804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="设置代理"></p>
<h1 id='2'> 方案二：用frp映射v2ray的inbound端口+校外设备http/socks5代理 </h1>


<p>该方案适用于校外设备无法使用v2ray的情况</p>
<p>值得一提的是，socks5的数据都是没有经过加密的明文数据，所以方案二与方案一并不被推荐</p>
<p>思路：在校内设备搭建一个v2ray的代理，将v2ray的inbound设为socks5流量，然后把这个inbound端口通过frp映射到云主机上。校外设备则通过socks5或http代理访问校内外。</p>
<p>frps.ini:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 12345</span><br><span class="line">token = 8d283ya2-7sl5-4a8d-857e</span><br></pre></td></tr></table></figure>


<p>然后是校内设备搭建v2ray与frp：</p>
<p>配置一个json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"port"</span>: 10808, //填监听端口</span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"socks"</span>, </span><br><span class="line">        <span class="string">"sniffing"</span>: &#123;</span><br><span class="line">        <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"destOverride"</span>: [<span class="string">"http"</span>, <span class="string">"tls"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"auth"</span>: <span class="string">"noauth"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后打开v2rayN.exe<br>左上角“服务器–添加自定义服务器”</p>
<p>然后选择刚才编辑的json导入，开启<br>开启全局代理</p>
<p>查看界面最下边的监听端口：<br><img src="https://img-blog.csdnimg.cn/20200312133500287.png" alt="代理地址"></p>
<p>现在v2ray配置完成了，接下来配置frpc.ini:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 12.34.56.78//公网ip</span><br><span class="line">server_port = 12345 //端口</span><br><span class="line">token = 8d283ya2-6dba-4a8d</span><br><span class="line">pool_count = 5</span><br><span class="line"></span><br><span class="line">[v2ray_mapping]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8083 <span class="comment">#供校外设备挂代理的端口</span></span><br><span class="line">local_port = 10809 <span class="comment">#校内设备本地http的端口，参考上一张图</span></span><br></pre></td></tr></table></figure>
<p>然后启动frpc</p>
<p>在校内设备的配置完成,<br>接下来就是校外设备设置代理了：</p>
<p>设置校园网专用的代理，如图：<br><img src="https://img-blog.csdnimg.cn/2020031213523693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>然后可以在auto switch中设置自动切换</p>
<p><img src="https://img-blog.csdnimg.cn/20200312135350737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="自动切换"><br>在访问校园网时会自动切换为校园代理。</p>
<h1 id='3'> 方案三：用frp映射v2ray的inbound端口+校外设备使用v2ray/ssr连接 </h1>

<p>该方案适用于校外设备可以使用v2ray的情况。<br>校内设备和云主机的配置过程和上述方案二大同小异。</p>
<p>其中v2ray的json配置需要换为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"inbounds"</span>: [</span><br><span class="line">  	//v2ray也支持ssr 所以下面的这段配置也可以换成ssr配置</span><br><span class="line">  	//然后校外设备就可以用ssr连接</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"port"</span>: 10809, // 本地监听端口</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,   </span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"clients"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"123456"</span>,  // 用户ID（相当于ssr中的密码），客户端与服务器只要保持相同即可</span><br><span class="line">            <span class="string">"alterId"</span>: 64 //客户端与服务端须保持相同</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,  // 传出协议</span><br><span class="line">      <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他的都一样</p>
<p>最后是校外设备设置代理，以Windows为例：<br>打开v2rayN.exe，然后左上角”服务器–添加vmess服务器”，<br>填写参数：<br><img src="https://img-blog.csdnimg.cn/20200313105352884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id='4'> 方案四：用v2ray自带的反代功能 </h1>


<p>我没有尝试过这种方案，只能放个<a href="https://toutyrater.github.io/app/reverse2.html" target="_blank" rel="noopener">文档链接</a><br>这个方案需要三方设备都使用v2ray</p>
<h1 id='5'> 方案五：用路由器代替校内主机 </h1>


<p>众所周知，路由器可以刷各种固件，有些固件本身就自带v2ray和frp<br>如果在校内没有跳板机，不妨试试路由器。<br>网上可以找到很多刷固件的教程。</p>
<p>接下来以老毛子为例进行说明。</p>
<p>首先校内的路由器必须要能上校外网络，很多学校是使用drcom的，对于drcom登录的，可以参考<a href="https://www.right.com.cn/forum/thread-215978-1-1.html" target="_blank" rel="noopener">这篇文章</a></p>
<p>或者ssh进路由器然后运行一些自动登录的脚本</p>
<p>frp设置和前面的没什么不同，路由器可以充当frpc或者frps，我们要让路由器充当frpc。</p>
<p>frp设置：<br>勾选“启动frpc客户端”，后面配置和前面的一样</p>
<p><img src="https://img-blog.csdnimg.cn/20200312151058521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="frp"></p>
<p>v2ray配置：<br>开启透明代理，设置透明代理端口1099</p>
<p>（如果这个路由器不想用于平时上网，可以不用勾选）<br><img src="https://img-blog.csdnimg.cn/20200312151236279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzY21z,size_16,color_FFFFFF,t_70" alt="v2ray"><br>然后进行config.json的配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      //这个是透明代理的inbound，平时连路由器上网的流量走这里</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"transparent"</span>,</span><br><span class="line">      <span class="string">"port"</span>: 1099,</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">        <span class="string">"followRedirect"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"sniffing"</span>: &#123;</span><br><span class="line">        <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"destOverride"</span>: [<span class="string">"http"</span>, <span class="string">"tls"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="string">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="string">"tproxy"</span>: <span class="string">"tproxy"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      //这个是校外跳进来的inbound，校外的流量走这里</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"vmess-mapping"</span>,</span><br><span class="line">      <span class="string">"port"</span>: 10809, // 本地监听端口</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"clients"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"123456"</span>, // 用户ID（相当于ssr中的密码），客户端与服务器只要保持相同即可</span><br><span class="line">            <span class="string">"alterId"</span>: 64 //客户端与服务端须保持相同</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"direct"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      //如果这个路由器还想用于平时上网，</span><br><span class="line">      //可以自行添加自己平时kx上网的配置，</span><br><span class="line">      //然后在rules里面添加路由规则</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"routing"</span>: &#123;</span><br><span class="line">    <span class="string">"domainStrategy"</span>: <span class="string">"IPOnDemand"</span>,</span><br><span class="line">    <span class="string">"rules"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这个路由器还想用于平时上网，<br>可以自行添加自己平时上网的服务器配置，<br>然后在rules里面添加路由规则。</p>
<p>更多细节请戳<a href="\2020\03\12\（详细版）基于frp与v2ray的几种校园网内网穿透的方案\">很详细的版本</a></p>
<p>本文地址： <a href="https://www.chimaoshu.top/（简略版）基于frp与v2ray的几种校园网内网穿透的方案/">https://www.chimaoshu.top/（简略版）基于frp与v2ray的几种校园网内网穿透的方案/</a> </p>
]]></content>
      <tags>
        <tag>v2ray</tag>
        <tag>frp</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>myfirstpage</title>
    <url>/myfirstpage/</url>
    <content><![CDATA[<p>这波<br>你只看到了第二层<br>而你把我想成了第一层<br>实际上<br>我<br>是第五层</p>
]]></content>
      <tags>
        <tag>WDNMD</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
